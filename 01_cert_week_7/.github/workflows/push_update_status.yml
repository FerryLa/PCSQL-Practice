name: Update Daily Status on Push
on:
  push:
    paths:
      - 'solutions/**'
      - '.github/workflows/push_update_status.yml'

permissions:
  contents: write

jobs:
  mark:
    runs-on: ubuntu-latest
    env:
      TZ: Asia/Seoul
      START_DATE: '2025-10-03'
      END_DATE:   '2025-11-21'
    steps:
      - uses: actions/checkout@v4

      - name: Update README table from pushed paths
        uses: actions/github-script@v7
        with:
          script: |
            const fs = require('fs');

            const START = new Date(process.env.START_DATE + 'T00:00:00+09:00');
            const END   = new Date(process.env.END_DATE   + 'T23:59:59+09:00');

            // 이번 푸시에서 변경된 날짜 수집: solutions/YYYY/MM/DD/…
            const changed = new Set();
            for (const c of context.payload.commits) {
              for (const f of [...c.added, ...c.modified]) {
                const m = f.match(/^solutions\/(\d{4})\/(\d{2})\/(\d{2})\//);
                if (m) changed.add(`${m[1]}-${m[2]}-${m[3]}`);
              }
            }
            if (changed.size === 0) return;

            // README 자동 구역 불러오기
            const readme = 'README.md';
            let md = fs.readFileSync(readme, 'utf8');
            const START_TAG = '<!-- PROGRESS:START -->';
            const END_TAG   = '<!-- PROGRESS:END -->';
            const s = md.indexOf(START_TAG), e = md.indexOf(END_TAG);
            if (s === -1 || e === -1) core.setFailed('Progress markers not found in README');

            // 현재 표 파싱
            const block = md.slice(s + START_TAG.length, e);
            const lines = block.trim().split('\n');
            const map = new Map(); // date -> {status, note}

            for (const line of lines) {
              const m = line.match(/^\|\s*(\d{4}-\d{2}-\d{2})\s*\|\s*(.+?)\s*\|\s*(.*?)\s*\|$/);
              if (m) map.set(m[1], { status: m[2], note: m[3] });
            }

            // 범위 전체 날짜가 없으면 생성
            const days = [];
            for (let d = new Date(START); d <= END; d.setDate(d.getDate()+1)) {
              const k = d.toISOString().slice(0,10);
              days.push(k);
              if (!map.has(k)) map.set(k, { status: '⬜', note: '' });
            }

            // 변경 날짜를 ✅/⏰로 갱신(첫 푸시 시간 기준, KST)
            for (const dateStr of changed) {
              // 해당 날짜에 포함된 커밋 중 가장 이른 timestamp
              const related = context.payload.commits.filter(c =>
                [...c.added, ...c.modified].some(f =>
                  f.startsWith(`solutions/${dateStr.slice(0,4)}/${dateStr.slice(5,7)}/${dateStr.slice(8,10)}/`)
                )
              );
              if (related.length === 0) continue;
              const firstUtc = new Date(related.map(c => c.timestamp).sort()[0]);
              const firstKst = new Date(firstUtc.getTime() + 9*3600*1000);

              const deadline = new Date(dateStr + 'T23:59:59+09:00');
              const lateWin  = new Date(dateStr + 'T29:59:59+09:00'); // 다음날 06:00

              let status = '✅';
              if (firstKst > deadline && firstKst <= lateWin) status = '⏰';

              const cur = map.get(dateStr) || { status: '⬜', note: '' };
              if (cur.status === '⬜' || cur.status === '⏰') {
                map.set(dateStr, { status, note: cur.note });
              }
            }

            // 표 재생성
            const header = '\n| Date | Status | Note |\n|------|--------|------|\n';
            const rows = days.map(d => {
              const {status, note} = map.get(d);
              return `| ${d} | ${status} | ${note} |`;
            }).join('\n') + '\n';

            md = md.slice(0, s + START_TAG.length) + header + rows + md.slice(e);
            fs.writeFileSync(readme, md);

      - name: Commit update
        run: |
          git config user.name "actions-bot"
          git config user.email "actions@users.noreply.github.com"
          git add README.md
          git diff --cached --quiet || git commit -m "chore: mark daily status from solutions push"
          git push
