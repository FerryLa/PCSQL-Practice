name: Update Daily Status on Push

on:
  push:
    branches: ['feature/**', 'develop']
    paths:
      - '**/solutions/**'
      - '.github/workflows/push_update_status.yml'   # 워크플로 수정 테스트 용(원치 않으면 지워도 됨)

permissions:
  contents: write
  pull-requests: write

jobs:
  mark:
    runs-on: ubuntu-latest
    env:
      TZ: Asia/Seoul
      README_PATH: 01_cert_week_7/README.md
    steps:
      # HEAD~1과 비교하려면 최소 2개 커밋이 필요
      - name: Checkout current ref
        uses: actions/checkout@v4
        with:
          ref: ${{ github.ref }}
          fetch-depth: 2

      # 표 갱신
      - name: Update README table (✅/⏰ auto mark)
        uses: actions/github-script@v7
        env:
          README_PATH: ${{ env.README_PATH }}
        with:
          script: |
            const fs = require('fs');
            const path = process.env.README_PATH;

            if (!fs.existsSync(path)) { core.warning(`Skip: ${path} not found`); return; }

            let md = fs.readFileSync(path, 'utf8');
            const S = '<!-- PROGRESS:START -->';
            const E = '<!-- PROGRESS:END -->';
            const si = md.indexOf(S), ei = md.indexOf(E);
            if (si < 0 || ei < 0) { core.warning('Skip: markers missing'); return; }

            // 블록 추출 (마커 사이)
            const before = md.slice(0, si + S.length);
            let   block  = md.slice(si + S.length, ei);
            const after  = md.slice(ei);

            // 기존 행만 뽑기(헤더/구분선 제거)
            const rawLines = block.split('\n')
              .map(s => s.trim())
              .filter(s => s && !/^(\| *Date *\| *Status *\| *Note *\|?)$/.test(s) && !/^(\|-{2,}\|[-| ]*?)$/.test(s));

            // 변경 파일에서 날짜 찾기 + git diff fallback
            const commits = Array.isArray(context.payload.commits) ? context.payload.commits : [];
            const changedPaths = [];
            for (const c of commits) {
              const add = Array.isArray(c.added)?c.added:[], mod = Array.isArray(c.modified)?c.modified:[], rem = Array.isArray(c.removed)?c.removed:[];
              for (const p of [...add, ...mod, ...rem]) changedPaths.push(p);
            }
            if (changedPaths.length === 0) {
              try {
                const { execSync } = require('child_process');
                const out = execSync('git diff --name-only HEAD~1 HEAD', { encoding: 'utf8' });
                out.split('\n').filter(Boolean).forEach(p => changedPaths.push(p));
                core.info('Used git diff fallback for changed paths.');
              } catch {}
            }
            const re = /(?:^|\/)solutions\/(\d{4})\/(\d{2})\/(\d{2})\//;
            const dateSet = new Set();
            for (const f of changedPaths) {
              const m = typeof f === 'string' ? f.match(re) : null;
              if (m) dateSet.add(`${m[1]}-${m[2]}-${m[3]}`);
            }

            // 오늘/어제 폴더가 실제 있으면 후보에 추가(푸시 없이 수동 파일 추가/이동 대비)
            const nowKST = new Date(new Date().toLocaleString('en-US', { timeZone: 'Asia/Seoul' }));
            const z = n => String(n).padStart(2,'0');
            const today = `${nowKST.getFullYear()}-${z(nowKST.getMonth()+1)}-${z(nowKST.getDate())}`;
            const yObj = new Date(nowKST); yObj.setDate(yObj.getDate()-1);
            const yesterday = `${yObj.getFullYear()}-${z(yObj.getMonth()+1)}-${z(yObj.getDate())}`;

            const rootDir = path.replace(/\/README\.md$/, '');
            const solRoot = `${rootDir}/solutions`;
            const dirFor = (d) => { const [Y,M,D] = d.split('-'); return `${solRoot}/${Y}/${M}/${D}`; };
            try {
              if (!dateSet.size) {
                if (fs.existsSync(dirFor(today)))     dateSet.add(today);
                if (fs.existsSync(dirFor(yesterday))) dateSet.add(yesterday);
              }
            } catch {}

            if (dateSet.size === 0) { core.info('No solution-date found. Skip.'); return; }

            // 마킹 규칙
            const hour = nowKST.getHours();
            const isEmpty = s => ['','⬜','🟪'].includes(String(s).trim());
            const wantMark = (date) => {
              if (date === today) return '✅';
              if (date === yesterday && hour < 6) return '⏰';
              return null;
            };

            // 기존 행 인덱스 맵(date -> idx)
            const rowIdx = new Map();
            rawLines.forEach((line, i) => {
              const m = line.match(/^\s*\|\s*(\d{4}-\d{2}-\d{2})\s*\|\s*([^|]*)\|\s*(.*)\|?\s*$/);
              if (m) rowIdx.set(m[1], i);
            });

            let lines = [...rawLines];
            let changed = false;

            for (const date of dateSet) {
              const mark = wantMark(date);
              if (!mark) continue;

              if (rowIdx.has(date)) {
                const i = rowIdx.get(date);
                const m = lines[i].match(/^\s*\|\s*(\d{4}-\d{2}-\d{2})\s*\|\s*([^|]*)\|\s*(.*)\|?\s*$/);
                const status = m ? m[2] : '';
                const rest   = m ? (m[3] || '').replace(/\|+\s*$/, '').trim() : '';
                if (isEmpty(status)) {
                  lines[i] = `| ${date} | ${mark} | ${rest} |`;
                  changed = true;
                }
              } else {
                // 새 날짜는 최상단에 삽입(최근일이 위쪽)
                lines.unshift(`| ${date} | ${mark} | |`);
                changed = true;
              }
            }

            if (!changed) { core.info('No table changes needed.'); return; }

            // 표는 항상 마커 블록 안에 "헤더 + 구분선 + 데이터"를 통째로 쓴다
            const header = '| Date       | Status | Note |\n|------------|--------|------|';
            block = '\n' + header + '\n' + lines.join('\n') + '\n';

            const out = before + block + after;
            fs.writeFileSync(path, out, 'utf8');
            core.info(`Updated ${path} for dates: ${[...dateSet].join(', ')}`);

      # feature/* 에서는 현재 브랜치로 커밋
      - name: Commit to feature branch
        if: startsWith(github.ref_name, 'feature/')
        run: |
          git config user.name "actions-bot"
          git config user.email "actions@users.noreply.github.com"
          git add "${{ env.README_PATH }}"
          git diff --cached --quiet || git commit -m "chore: mark daily status"
          git push origin HEAD:${{ github.ref_name }}

      # develop 에서는 PR만 생성(보호 브랜치 준수)
      - name: Create PR to develop
        if: github.ref_name == 'develop'
        uses: peter-evans/create-pull-request@v6
        with:
          base: develop
          branch: automation/readme-progress
          title: "chore: update README progress (push trigger)"
          commit-message: "chore: update README progress (push trigger)"
          add-paths: |
            ${{ env.README_PATH }}
