name: Update Daily Status on Push

on:
  push:
    branches: ['feature/**', 'develop']
    paths:
      - '**/solutions/**'
      - '.github/workflows/push_update_status.yml'


permissions:
  contents: write
  pull-requests: write

jobs:
  mark:
    runs-on: ubuntu-latest
    env:
      TZ: Asia/Seoul
      START_DATE: '2025-10-02'
      END_DATE:   '2025-11-21'
      README_PATH: 01_cert_week_7/README.md

    steps:
      # HEAD~1과 비교하려면 최소 2개 커밋을 받아야 함
      - name: Checkout current ref
        uses: actions/checkout@v4
        with:
          ref: ${{ github.ref }}
          fetch-depth: 2

      # ── 디버그 1: 컨텍스트
      - name: Debug context
        run: |
          echo "branch=${GITHUB_REF_NAME}"
          echo "repo=${GITHUB_REPOSITORY}"
          echo "readme=${README_PATH}"
          if [ -f "${README_PATH}" ]; then
            echo "README exists ✅"
          else
            echo "README missing ❌"
            exit 0
          fi

      # ── 디버그 2: 마커 존재 확인
      - name: Check progress markers
        run: |
          if grep -q "<!-- PROGRESS:START -->" "${README_PATH}"; then
            echo "Markers found."
          else
            echo "No markers. Skip."
            exit 0
          fi

      # ── 디버그 3: 변경 파일 목록
      - name: Show changed files in push
        run: |
          git diff --name-only HEAD~1 HEAD || true

      # ── 실제 갱신 로직 (✅/⏰ 자동 반영)
      - name: Update README table (auto mark ✅/⏰)
        uses: actions/github-script@v7
        env:
          README_PATH: ${{ env.README_PATH }}
        with:
          script: |
            const fs = require('fs'); // core, github, context는 전역 제공
            const path = process.env.README_PATH;

            // 0) 파일/마커 확인
            if (!fs.existsSync(path)) { core.warning(`Skip: ${path} not found`); return; }
            let md = fs.readFileSync(path, 'utf8');
            const S='<!-- PROGRESS:START -->', E='<!-- PROGRESS:END -->';
            const si=md.indexOf(S), ei=md.indexOf(E);
            if (si<0 || ei<0) { core.warning('Skip: markers missing'); return; }

            // 1) 변경 경로에서 날짜 수집 (+ git diff fallback)
            const commits = Array.isArray(context.payload.commits) ? context.payload.commits : [];
            const changedPaths = [];
            for (const c of commits) {
              const add = Array.isArray(c.added)?c.added:[];
              const mod = Array.isArray(c.modified)?c.modified:[];
              const rem = Array.isArray(c.removed)?c.removed:[];
              for (const p of [...add, ...mod, ...rem]) changedPaths.push(p);
            }
            if (changedPaths.length === 0) {
              const { execSync } = require('child_process');
              try {
                const out = execSync('git diff --name-only HEAD~1 HEAD', { encoding: 'utf8' });
                out.split('\n').filter(Boolean).forEach(p => changedPaths.push(p));
                core.info('Used git diff fallback for changed paths.');
              } catch {}
            }
            const re = /(?:^|\/)solutions\/(\d{4})\/(\d{2})\/(\d{2})\//;
            const dateSet = new Set();
            for (const f of changedPaths) {
              const m = typeof f === 'string' ? f.match(re) : null;
              if (m) dateSet.add(`${m[1]}-${m[2]}-${m[3]}`);
            }

            // 1-보강) 오늘/어제 폴더가 실제로 있으면 날짜에 추가
            const nowKST = new Date(new Date().toLocaleString('en-US', { timeZone: 'Asia/Seoul' }));
            const z = n => String(n).padStart(2,'0');
            const today = `${nowKST.getFullYear()}-${z(nowKST.getMonth()+1)}-${z(nowKST.getDate())}`;
            const yObj = new Date(nowKST); yObj.setDate(yObj.getDate()-1);
            const yesterday = `${yObj.getFullYear()}-${z(yObj.getMonth()+1)}-${z(yObj.getDate())}`;

            const rootDir = path.replace(/\/README\.md$/, '');
            const solRoot = `${rootDir}/solutions`;
            const dirFor = (d) => {
              const [Y,M,D] = d.split('-');
              return `${solRoot}/${Y}/${M}/${D}`;
            };
            try {
              if (!dateSet.size) {
                if (fs.existsSync(dirFor(today)))     dateSet.add(today);
                if (fs.existsSync(dirFor(yesterday))) dateSet.add(yesterday);
              }
            } catch {}

            // 후보 없으면 종료
            if (dateSet.size === 0) { core.info('No solution-date found. Skip.'); return; }

            // 2) 마크 계산(오늘=✅, 새벽 0~5시의 어제=⏰)
            const hour = nowKST.getHours();
            const isEmpty = s => ['','⬜','🟪'].includes(String(s).trim());
            const wantMark = (date) => {
              if (date === today) return '✅';
              if (date === yesterday && hour < 6) return '⏰';
              return null;
            };

            // 3) 블록만 수정 (없으면 행 추가 — 헤더는 마커 밖, 데이터 맨 앞에 삽입)
            const before = md.slice(0, si + S.length);
            let   block  = md.slice(si + S.length, ei);
            const after  = md.slice(ei);

            const lines = block.split('\n');
            const rowIdx = new Map();
            lines.forEach((line, i) => {
              const m = line.match(/^\s*\|\s*(\d{4}-\d{2}-\d{2})\s*\|\s*([^|]*)\|\s*(.*)\|?\s*$/);
              if (m) rowIdx.set(m[1], i);
            });

            let changed = false;

            for (const date of dateSet) {
              const mark = wantMark(date);
              if (!mark) continue;

              if (rowIdx.has(date)) {
                const i = rowIdx.get(date);
                const m = lines[i].match(/^\s*\|\s*(\d{4}-\d{2}-\d{2})\s*\|\s*([^|]*)\|\s*(.*)\|?\s*$/);
                const status = m[2];
                const rest   = m[3];
                if (isEmpty(status)) {
                  lines[i] = `| ${date} | ${mark} | ${rest} |`;
                  changed = true;
                }
              } else {
                const newRow = `| ${date} | ${mark} | |`;
                lines.splice(0, 0, newRow); // 데이터 블록 맨 앞에 삽입
                changed = true;
              }
            }

            if (!changed) { core.info('No table changes needed.'); return; }
            block = lines.join('\n');
            const out = before + '\n' + block.replace(/^\n+/, '') + after;
            fs.writeFileSync(path, out, 'utf8');
            core.info(`Updated ${path} for dates: ${[...dateSet].join(', ')}`);

      # feature/* 에서는 현재 브랜치에 커밋
      - name: Commit to feature branch
        if: startsWith(github.ref_name, 'feature/')
        run: |
          git config user.name "actions-bot"
          git config user.email "actions@users.noreply.github.com"
          git add "${{ env.README_PATH }}"
          git diff --cached --quiet || git commit -m "chore: mark daily status"
          git push origin HEAD:${{ github.ref_name }}

      # develop 에서는 PR만
      - name: Create PR to develop
        if: github.ref_name == 'develop'
        uses: peter-evans/create-pull-request@v6
        with:
          base: develop
          branch: automation/readme-progress
          title: "chore: update README progress (push trigger)"
          commit-message: "chore: update README progress (push trigger)"
          add-paths: |
            ${{ env.README_PATH }}
