name: Daily Close (mark all past blanks as ❌)

on:
  schedule:
    - cron: '5 15 * * *'   # 매일 00:05 KST (UTC+9 → 15:05 UTC)
  workflow_dispatch:

permissions:
  contents: write
  pull-requests: write

jobs:
  close:
    runs-on: ubuntu-latest
    env:
      TZ: Asia/Seoul
      README_PATH: 01_cert_week_7/README.md   # 너의 README 경로
      START_DATE: ''                           # 예: '2025-10-01' 넣으면 그 이후만 마감. 비우면 전체 과거
    steps:
      - name: Checkout develop
        uses: actions/checkout@v4
        with:
          ref: refs/heads/develop
          fetch-depth: 2

      - name: Mark ❌ for all past empty cells (incl. 🟪)
        uses: actions/github-script@v7
        env:
          README_PATH: ${{ env.README_PATH }}
          START_DATE: ${{ env.START_DATE }}
        with:
          script: |
            const fs = require('fs'); // core, github, context 전역 제공
            const path = process.env.README_PATH;
            if (!fs.existsSync(path)) { core.setFailed(`README not found: ${path}`); return; }

            let md = fs.readFileSync(path, 'utf8');
            const S = '<!-- PROGRESS:START -->';
            const E = '<!-- PROGRESS:END -->';
            const si = md.indexOf(S), ei = md.indexOf(E);
            if (si < 0 || ei < 0) { core.setFailed('Progress markers not found'); return; }

            const before = md.slice(0, si + S.length);
            let   block  = md.slice(si + S.length, ei);
            const after  = md.slice(ei);

            // 블록 안에서 기존 행만 추출(헤더/구분선 제거)
            let lines = block.split('\n')
              .map(s => s.trim())
              .filter(Boolean);

            // 혹시 이전에 헤더가 들어있다면 제거
            const isHeader = (s) => /^\|\s*Date\s*\|\s*Status\s*\|\s*Note\s*\|?$/.test(s);
            const isDivider = (s) => /^\|[-\s|]+\|$/.test(s);
            lines = lines.filter(s => !(isHeader(s) || isDivider(s)));

            // 날짜 파서 (KST 기준)
            const kstNow = new Date(new Date().toLocaleString('en-US', { timeZone: 'Asia/Seoul' }));
            const z = n => String(n).padStart(2,'0');
            const todayStr = `${kstNow.getFullYear()}-${z(kstNow.getMonth()+1)}-${z(kstNow.getDate())}`;

            const toDate = (yyyy_mm_dd) => {
              const [Y,M,D] = yyyy_mm_dd.split('-').map(x => parseInt(x,10));
              // 현지 시간으로 생성(단순 비교용)
              return new Date(Y, M-1, D, 0, 0, 0);
            };
            const startDateStr = (process.env.START_DATE || '').trim();
            const hasStartFloor = !!startDateStr;
            const startFloor = hasStartFloor ? toDate(startDateStr) : null;
            const today = toDate(todayStr);

            const isEmpty = (s) => {
              const t = String(s || '').trim();
              return t === '' || t === '⬜' || t === '🟪';
            };

            // 각 행 검사: 과거(오늘 이전) + (옵션)시작일 이후 범위에서 빈칸/⬜/🟪 ⇒ ❌
            let changed = false;
            const rowRe = /^\s*\|\s*(\d{4}-\d{2}-\d{2})\s*\|\s*([^|]*)\|\s*(.*)\|?\s*$/;

            const newLines = lines.map(line => {
              const m = line.match(rowRe);
              if (!m) return line; // 표 형식 아니면 건드리지 않음
              const [, dateStr, statusRaw, restRaw] = m;
              const rowDate = toDate(dateStr);

              // 미래/오늘은 스킵, 과거만 마감
              if (!(rowDate < today)) return line;
              if (hasStartFloor && rowDate < startFloor) return line;

              const status = statusRaw.trim();
              const rest = (restRaw || '').replace(/\|+\s*$/, '').trim();

              if (isEmpty(status)) {
                changed = true;
                return `| ${dateStr} | ❌ | ${rest} |`;
              }
              return line;
            });

            if (!changed) {
              core.info('No past blanks to close.'); 
            } else {
              // 항상 표 전체(헤더+구분선+데이터)를 마커 블록 안에 통째로 작성
              const header = '| Date       | Status | Note |\n|------------|--------|------|';
              block = '\n' + header + '\n' + newLines.join('\n') + '\n';
              const out = before + block + after;
              fs.writeFileSync(path, out, 'utf8');
              core.info('Closed past blanks as ❌ (including 🟪).');
            }

      - name: Create PR to develop
        if: success()
        uses: peter-evans/create-pull-request@v6
        with:
          base: develop
          branch: automation/daily-close
          title: "chore: daily close (mark past blanks as ❌)"
          commit-message: "chore: daily close (mark past blanks as ❌)"
          add-paths: |
            ${{ env.README_PATH }}
