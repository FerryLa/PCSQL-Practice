name: Daily Close (mark all past blanks as ‚ùå)

on:
  schedule:
    - cron: '5 15 * * *'   # Îß§Ïùº 00:05 KST (UTC+9 ‚Üí 15:05 UTC)
  workflow_dispatch:

permissions:
  contents: write
  pull-requests: write

jobs:
  close:
    runs-on: ubuntu-latest
    env:
      TZ: Asia/Seoul
      README_PATH: 01_cert_week_7/README.md   # ÎÑàÏùò README Í≤ΩÎ°ú
      START_DATE: ''                           # Ïòà: '2025-10-01' ÎÑ£ÏúºÎ©¥ Í∑∏ Ïù¥ÌõÑÎßå ÎßàÍ∞ê. ÎπÑÏö∞Î©¥ Ï†ÑÏ≤¥ Í≥ºÍ±∞
    steps:
      - name: Checkout develop
        uses: actions/checkout@v4
        with:
          ref: refs/heads/develop
          fetch-depth: 2

      - name: Mark ‚ùå for all past empty cells (incl. üü™)
        uses: actions/github-script@v7
        env:
          README_PATH: ${{ env.README_PATH }}
          START_DATE: ${{ env.START_DATE }}
        with:
          script: |
            const fs = require('fs'); // core, github, context Ï†ÑÏó≠ Ï†úÍ≥µ
            const path = process.env.README_PATH;
            if (!fs.existsSync(path)) { core.setFailed(`README not found: ${path}`); return; }

            let md = fs.readFileSync(path, 'utf8');
            const S = '<!-- PROGRESS:START -->';
            const E = '<!-- PROGRESS:END -->';
            const si = md.indexOf(S), ei = md.indexOf(E);
            if (si < 0 || ei < 0) { core.setFailed('Progress markers not found'); return; }

            const before = md.slice(0, si + S.length);
            let   block  = md.slice(si + S.length, ei);
            const after  = md.slice(ei);

            // Î∏îÎ°ù ÏïàÏùò ÎùºÏù∏ Ï†ïÎ¶¨
            let lines = block.split('\n').map(s => s.trim()).filter(Boolean);
            const isHeader  = s => /^\|\s*Date\s*\|\s*Status\s*\|\s*Note\s*\|?$/.test(s);
            const isDivider = s => /^\|[-\s|]+\|$/.test(s);
            lines = lines.filter(s => !(isHeader(s) || isDivider(s)));

            core.startGroup('Parsed table rows');
            lines.forEach(l => core.info(l));
            core.endGroup();

            // KST Ïò§Îäò, ÏãúÏûëÏùº ÌïòÌïú
            const kstNow = new Date(new Date().toLocaleString('en-US', { timeZone: 'Asia/Seoul' }));
            const z = n => String(n).padStart(2,'0');
            const todayStr = `${kstNow.getFullYear()}-${z(kstNow.getMonth()+1)}-${z(kstNow.getDate())}`;
            const toDate = (d) => { const [Y,M,D] = d.split('-').map(n=>+n); return new Date(Y, M-1, D, 0, 0, 0); };
            const today = toDate(todayStr);

            const startDateStr = (process.env.START_DATE || '').trim();
            const hasFloor = !!startDateStr;
            const floor = hasFloor ? toDate(startDateStr) : null;

            const isEmpty = s => {
              const t = String(s||'').trim();
              return t === '' || t === '‚¨ú' || t === 'üü™';
            };

            const rowRe = /^\s*\|\s*(\d{4}-\d{2}-\d{2})\s*\|\s*([^|]*)\|\s*(.*)\|?\s*$/;
            let changed = false;
            const outLines = lines.map(line => {
              const m = line.match(rowRe);
              if (!m) { core.info(`Skip(non-row): ${line}`); return line; }
              const [, dateStr, statusRaw, restRaw] = m;
              const when = toDate(dateStr);
              if (!(when < today)) { core.info(`Skip(today/future): ${dateStr}`); return line; }
              if (hasFloor && when < floor) { core.info(`Skip(before floor ${startDateStr}): ${dateStr}`); return line; }

              const status = statusRaw.trim();
              const rest = (restRaw || '').replace(/\|+\s*$/, '').trim();
              if (isEmpty(status)) {
                core.info(`MARK ‚ùå: ${dateStr} (was "${status||'empty'}")`);
                changed = true;
                return `| ${dateStr} | ‚ùå | ${rest} |`;
              } else {
                core.info(`Keep: ${dateStr} (status "${status}")`);
                return line;
              }
            });

            if (!changed) {
              core.info('No past blanks to close.');
            } else {
              const header = '| Date       | Status | Note |\n|------------|--------|------|';
              block = '\n' + header + '\n' + outLines.join('\n') + '\n';
              fs.writeFileSync(path, before + block + after, 'utf8');
              core.info('Closed past blanks as ‚ùå (including üü™).');
            }
      

      - name: Create PR to develop
        if: success()
        uses: peter-evans/create-pull-request@v6
        with:
          base: develop
          branch: automation/daily-close
          title: "chore: daily close (mark past blanks as ‚ùå)"
          commit-message: "chore: daily close (mark past blanks as ‚ùå)"
          add-paths: |
            ${{ env.README_PATH }}
