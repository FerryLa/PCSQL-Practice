name: Daily Close (mark all past blanks as ❌)

on:
  schedule:
    - cron: '5 15 * * *'   # 매일 00:05 KST (UTC+9 → 15:05 UTC)
  workflow_dispatch:

permissions:
  contents: write
  pull-requests: write

jobs:
  close:
    runs-on: ubuntu-latest
    env:
      TZ: Asia/Seoul
      README_PATH: 01_cert_week_7/README.md   # 너의 README 경로
      START_DATE: ''                           # 예: '2025-10-01' 넣으면 그 이후만 마감. 비우면 전체 과거
    steps:
      - name: Checkout develop
        uses: actions/checkout@v4
        with:
          ref: refs/heads/develop
          fetch-depth: 2

      - name: Mark ❌ for all past empty cells (incl. 🟪)
        id: close_mark                          # ← 출력값을 쓰기 위해 id 추가
        uses: actions/github-script@v7
        env:
          README_PATH: ${{ env.README_PATH }}
          START_DATE: ${{ env.START_DATE }}
        with:
          script: |
            const fs = require('fs'); // core, github, context 전역 제공
            const path = process.env.README_PATH;
            if (!fs.existsSync(path)) { core.setFailed(`README not found: ${path}`); return; }

            let md = fs.readFileSync(path, 'utf8');
            const S='<!-- PROGRESS:START -->', E='<!-- PROGRESS:END -->';
            const si=md.indexOf(S), ei=md.indexOf(E);
            if (si<0 || ei<0) { core.setFailed('Progress markers not found'); return; }

            const before = md.slice(0, si+S.length);
            let   block  = md.slice(si+S.length, ei);
            const after  = md.slice(ei);

            // 블록 행만(헤더/구분선 제거)
            let lines = block.split('\n').map(s=>s.trim()).filter(Boolean);
            const isHeader = s => /^\|\s*Date\s*\|\s*Status\s*\|\s*Note\s*\|?$/.test(s);
            const isDivider= s => /^\|[-\s|]+\|$/.test(s);
            lines = lines.filter(s => !(isHeader(s) || isDivider(s)));

            const kstNow = new Date(new Date().toLocaleString('en-US',{timeZone:'Asia/Seoul'}));
            const z=n=>String(n).padStart(2,'0');
            const today = new Date(`${kstNow.getFullYear()}-${z(kstNow.getMonth()+1)}-${z(kstNow.getDate())}T00:00:00`);
            const toDate = d => { const [Y,M,D]=d.split('-').map(Number); return new Date(Y, M-1, D); };

            const floorStr=(process.env.START_DATE||'').trim();
            const hasFloor=!!floorStr;
            const floor   = hasFloor? toDate(floorStr): null;

            const isEmpty = s => ['','⬜','🟪'].includes(String(s).trim());
            const rowRe = /^\s*\|\s*(\d{4}-\d{2}-\d{2})\s*\|\s*([^|]*)\|\s*(.*)\|?\s*$/;

            let changed=false;
            const newLines = lines.map(line=>{
              const m=line.match(rowRe); if(!m) return line;
              const [,dateStr,statusRaw,restRaw]=m;
              const d=toDate(dateStr);
              if(!(d<today)) return line;
              if(hasFloor && d<floor) return line;
              const status = statusRaw.trim();
              const rest   = (restRaw||'').replace(/\|+\s*$/,'').trim();
              if(isEmpty(status)) { changed=true; return `| ${dateStr} | ❌ | ${rest} |`; }
              return line;
            });

            if(changed){
              const header='| Date       | Status | Note |\n|------------|--------|------|';
              const outBlock = '\n'+header+'\n'+newLines.join('\n')+'\n';
              const out = before + outBlock + after;
              fs.writeFileSync(path,out,'utf8');
              core.info('Closed past blanks as ❌ (including 🟪).');
              core.setOutput('changed','1');      // ← 변경 발생 플래그
            }else{
              core.info('No past blanks to close.');
              core.setOutput('changed','0');
            }

      - name: Create PR to develop
        if: steps.close_mark.outputs.changed == '1'          # ← 변경 없으면 PR 스킵
        uses: peter-evans/create-pull-request@v6
        with:
          base: develop
          title: "chore: daily close (mark past blanks as ❌)"
          commit-message: "chore: daily close (mark past blanks as ❌)"
          add-paths: |
            ${{ env.README_PATH }}
          branch: automation/daily-close               # 기본 브랜치명
          branch-suffix: timestamp                     # ← 접미사로 충돌 회피
          delete-branch: true                          # 머지 후 청소
          update-existing-pr: true                     # 기존 PR 있으면 갱신
